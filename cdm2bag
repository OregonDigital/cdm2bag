#!/usr/bin/env ruby

require 'linkeddata'
require 'yaml'
require 'bagit'
require 'logger'
require 'docopt'
require './mapping_methods.rb'

include MappingMethods

doc = <<DOCOPT
ContentDM to BagIt

Consumes a directory of ContentDM collections and converts them into
bags.

Usage:
  #{__FILE__} [--skip] [--map-file=<file>] DIR [TARGET]
  #{__FILE__} -h | --version

Options:
  -s --skip             Skip missing fields.
  -m --map-file=<file>  Mapping file. [default: mapping.yml]
  -h --help             Show this help screen.
  -v --version          Show version.

DOCOPT

def create_graphs(file, collection)
  graphs = []
  graph = RDF::Graph.new
  File.readlines(file).each do |ln|
    tag = ln.match(/^\s*<([a-z]+)>/)
    next if tag.nil? or tag[1] == 'record' or tag[1] == 'records'
    tag = tag[1]
    ln.slice!("<#{tag}>")
    ln.slice!("<\/#{tag}>")
    ln = ln.strip

    bnode = RDF::Node.new

    if tag.to_s == 'dmrecord'
      graph << RDF::Statement(bnode, RDF::DC.replaces, RDF::URI("http://oregondigital.org/u?/#{collection},#{ln}"))
      add_set(collection, graph, bnode)
      graphs << set_subject(graph, RDF::URI("http://example.org/ns/#{ln}")) unless graph.empty?
      graph = RDF::Graph.new
      bnode = RDF::Node.new
      next
    end

    begin
      if @collection_mappings[tag.to_s].include? 'method' and not (ln == nil or ln == '')
        graph << send(@collection_mappings[tag.to_s]['method'].to_sym, bnode, ln) unless @skip.include? ln.downcase
      else
        next if @collection_mappings[tag.to_s] == "SKIP" or (ln == nil or ln == '')
        ns, term = @collection_mappings[tag.to_s].split(':') 
        graph << RDF::Statement.new(bnode, @namespaces[ns][term], ln) unless @skip.include? ln.downcase
      end
    rescue NoMethodError => e
      @missing_fields << tag unless @missing_fields.include? tag
    end
  end
  graphs
end

def add_set(collection, graph, subject)
  set = map_set[collection.downcase]
  if set
    graph << RDF::Statement(subject, @namespaces["oregon"]["set"], RDF::URI("http://oregondigital.org/resource/oregondigital:#{set}"))
  end
end

def map_set
  {
    "oe_explorer" => "oregon-explorer",
    "siuslaw" => "siuslaw"
  }
end

def set_subject(graph, subject)
  graph.each_statement do |statement|
    if statement.subject.node?
      graph.delete(statement)
      graph << RDF::Statement.new(subject, statement.predicate, statement.object)
    end
  end
  graph
end

def write_desc_metadata(graph, bag)
  RDF::Writer.open("descMetadata.nt", :format => :ntriples) do |writer|
    writer << graph
  end
  bag.add_tag_file('descMetadata.nt', 'descMetadata.nt')
end

def add_content_file(graph, bag, dir)
  begin
    query = RDF::Query.new do
      pattern [:subject, RDF::URI('http://opaquenamespace.org/ns/full'), :full]
    end
    results = query.execute(graph)
    if results.empty?
      puts 'no full'
      return nil
    end
    fname = Pathname(results.first[:full].to_s).basename.to_s unless fname
    fname = fname.split(/\\/).last
    file = File.join(dir, '', fname.to_s.split('\\')[-1].gsub(/^1_/, '')) 
    require 'find'
    Find.find(dir) do |path|
      file = path if path.include? fname
    end
    bag.add_file("content.#{Pathname(file).basename.to_s.split('.').last}", file)
  rescue Errno::ENOENT => e
    @log.warn("#{fname}: No File Found.")
  end
end

def make_bag(dir, graph, subject, source_dir)
  bag = BagIt::Bag.new(File.join(dir, File.basename(subject)))
  write_desc_metadata(graph, bag)
  add_content_file(graph, bag, source_dir)
  bag.tagmanifest!
  bag.manifest!
end

def make_coll_bags(dir, target, collection, *args)
  # file = File.join(dir, collection, 'index', 'description', 'desc.all')
  file = File.join(dir, collection, 'desc.all')
  col_dir = FileUtils.mkdir_p(File.join(target, collection))
  @collection_mappings = @mappings['mappings'][collection]

  graphs = create_graphs(file, collection)
  if @missing_fields.empty? or @opts['--skip']
    puts 'making bags'
    graphs.each do |graph|
      subject = ''
      graph.each_statement do |s|
        if s.subject.start_with? 'http://example.org/ns/'
          subject = s.subject
          break
        end
      end
      make_bag(col_dir, graph, subject, File.join(dir, collection))
    end
  else
    puts "Missing fields, not writing bags for #{collection}. Add fields to mapping.yml, or use --skip flag."
  end
end

def make_all_bags(dir, target)
  target = FileUtils.mkdir_p(target)
  Dir.foreach(dir) do |collection|
    next if collection.start_with?(".")
    make_coll_bags(dir, target, collection)
  end
end

begin
  @opts = Docopt::docopt(doc, version: 'cdm2bag 0.0.2')

  @missing_fields = []
  @mappings = YAML.load_file(@opts['--map-file'])
  @namespaces = {}
  @mappings['namespaces'].each do |ns, base_uri|
    @namespaces[ns] = RDF::Vocabulary.new(base_uri)
  end
  @skip = ['unknown', 'n/a']

  @log = Logger.new('logfile.log')

  make_all_bags(@opts['DIR'], @opts['TARGET'] || 'bags')
  puts @missing_fields unless @missing_fields.empty?
rescue Docopt::Exit => e
  puts e.message
end
